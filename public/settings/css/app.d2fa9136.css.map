{"version":3,"file":"css/app.d2fa9136.css","mappings":"AAkBA,yBACC,cAAe,CACf,QAAS,CACT,UAAW,CACX,WAAY,CAEZ,gBAAiB,CAEjB,YAED,CAEA,4BACC,kBAAmB,CACnB,iBACD,CC+EA,+BACC,YAAa,CACb,OAAQ,CACR,QACD,CCoHA,KACC,6CAAiD,CACjD,kCAAmC,CACnC,iCACD,CAEA,sBACC,sBACD,CCxEA,4BACC,cACD,CAEA,+BACC,kBACD,CAEA,8DAEC,8BACD,CAEA,0BACC,wBAAyB,CACzB,wBAAyB,CACzB,oBAAsB,CACtB,qBACD,CAEA,8CAEC,kBAAmB,CACnB,eAAgB,CAChB,iBAAkB,CAClB,iBACD,CAEA,wBACC,iBAAkB,CAClB,iBACD,CAEA,sBACC,+BACD,CC9LA,yBACC,mBAAoB,CACpB,sBAAuB,CACvB,kBAAmB,CACnB,WAAY,CACZ,YAAa,CACb,iBACD,CCyEA,MACC,kBACD,CAEA,mBACC,eAAiB,CACjB,YAAa,CACb,6BAA8B,CAC9B,kBACD,CAEA,8BACC,eAAmB,CACnB,aACD,CAEA,cACC,YAAa,CACb,kBACD,CAEA,oBACC,kBAAmB,CACnB,WACD,CAEA,0DAKC,UACD,CAEA,+BAGC,aACD,CAEA,2MAGC,qBACD,CAEA,gDACC,2BACD,CAEA,iGAEC,iBACD,CC5HA,uCACC,cACD,CCkCA,8BACC,WACD,CC5CA,oCACC,cAAe,CACf,eAAiB,CACjB,eAAgB,CAChB,mBAAqB,CACrB,YAAa,CACb,6BACD,CAEA,6CACC,eAAmB,CACnB,aACD,CCoEA,8DAEC,qBACD,CAIA,gPAIC,uBAAwB,CACxB,QACD,CAGA,4FAEC,yBACD,CCoFA,wBAEC,YAAa,CACb,kBACD,CCyFA,4BACC,cACD,CAEA,+BACC,qBACD,CCzJA,kCACC,qBACD,CCpDA,wBACC,SAAU,CACV,+BACD","sources":["webpack://openwb-ui-settings/./src/components/OpenwbPageFooter.vue","webpack://openwb-ui-settings/./src/components/OpenwbPageMessages.vue","webpack://openwb-ui-settings/./src/App.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseArrayInput.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseAvatar.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseCard.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseClickButton.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseCopyToClipboard.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseHeading.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseNumberInput.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseRangeInput.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseTextInput.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseTextarea.vue","webpack://openwb-ui-settings/./src/components/OpenwbBaseToast.vue"],"sourcesContent":["<template>\n\t<footer id=\"footer\" class=\"footer bg-dark text-light font-small\">\n\t\t<div class=\"container text-center\">\n\t\t\t<small>\n\t\t\t\tSie befinden sich hier: Einstellungen /\n\t\t\t\t{{ $route.meta.heading }}\n\t\t\t</small>\n\t\t</div>\n\t</footer>\n</template>\n\n<script>\nexport default {\n\tname: \"OpenwbPageFooter\",\n};\n</script>\n\n<style scoped>\n.footer {\n\tposition: fixed;\n\tbottom: 0;\n\twidth: 100%;\n\theight: 30px;\n\t/* fixed height of footer */\n\tline-height: 30px;\n\t/* vertically center the text there */\n\tz-index: 1030;\n\t/* same as menu */\n}\n\n.container {\n\tpadding-right: 15px;\n\tpadding-left: 15px;\n}\n</style>\n","<template>\n\t<div class=\"openwb-toast position-fixed bottom-0 right-0 p-3\">\n\t\t<openwb-base-toast\n\t\t\tv-for=\"message in messages\"\n\t\t\t:key=\"message.topic\"\n\t\t\t:topic=\"message.topic\"\n\t\t\t:source=\"message.source\"\n\t\t\t:subtype=\"message.type\"\n\t\t\t:timestamp=\"message.timestamp\"\n\t\t\t@dismiss=\"dismiss\"\n\t\t>\n\t\t\t<span v-html=\"message.message\" />\n\t\t</openwb-base-toast>\n\t</div>\n</template>\n\n<script>\nimport ComponentStateMixin from \"@/components/mixins/ComponentState.vue\";\n\nexport default {\n\tname: \"OpenwbPageMessages\",\n\tmixins: [ComponentStateMixin],\n\tdata() {\n\t\treturn {\n\t\t\tmqttTopicsToSubscribe: [\n\t\t\t\t\"openWB/system/messages/+\",\n\t\t\t\t\"openWB/command/\" + this.$root.mqttClientId + \"/messages/+\",\n\t\t\t\t\"openWB/command/\" + this.$root.mqttClientId + \"/error\",\n\t\t\t],\n\t\t};\n\t},\n\tcomputed: {\n\t\tmessages() {\n\t\t\tconst myMessages = [];\n\t\t\tif (this.alertData) {\n\t\t\t\tmyMessages.push({\n\t\t\t\t\ttopic:\n\t\t\t\t\t\t\"openWB/command/\" + this.$root.mqttClientId + \"/error\",\n\t\t\t\t\tsource: \"command\",\n\t\t\t\t\ttype: \"danger\",\n\t\t\t\t\tmessage:\n\t\t\t\t\t\t'Bei der Verarbeitung des Befehls \\'<span class=\"font-weight-bold\">' +\n\t\t\t\t\t\tthis.alertData.command +\n\t\t\t\t\t\t\"</span>' mit den Parametern '<span class=\\\"font-weight-bold\\\">\" +\n\t\t\t\t\t\tthis.alertData.data +\n\t\t\t\t\t\t\"</span>' ist ein Fehler aufgetreten:<br />\" +\n\t\t\t\t\t\t\"<pre class='font-weight-bold'>\" +\n\t\t\t\t\t\tthis.alertData.error +\n\t\t\t\t\t\t\"</pre>\",\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.systemMessages.forEach((message) => {\n\t\t\t\tmyMessages.push(message);\n\t\t\t});\n\t\t\tthis.clientMessages.forEach((message) => {\n\t\t\t\tmyMessages.push(message);\n\t\t\t});\n\t\t\treturn myMessages;\n\t\t},\n\t\t/**\n\t\t * get initial error message\n\t\t */\n\t\talertData() {\n\t\t\treturn this.$store.state.mqtt[\n\t\t\t\t\"openWB/command/\" + this.$root.mqttClientId + \"/error\"\n\t\t\t];\n\t\t},\n\t\tsystemMessages() {\n\t\t\tlet messageTopics = this.getWildcardTopics(\n\t\t\t\t\"openWB/system/messages/+\"\n\t\t\t);\n\t\t\tvar messageList = [];\n\t\t\tfor (const [key, element] of Object.entries(messageTopics)) {\n\t\t\t\tmessageList.push({ topic: key, ...element });\n\t\t\t}\n\t\t\treturn messageList;\n\t\t},\n\t\tclientMessages() {\n\t\t\tlet messageTopics = this.getWildcardTopics(\n\t\t\t\t\"openWB/command/\" + this.$root.mqttClientId + \"/messages/+\"\n\t\t\t);\n\t\t\tvar messageList = [];\n\t\t\tfor (const [key, element] of Object.entries(messageTopics)) {\n\t\t\t\tmessageList.push({ topic: key, ...element });\n\t\t\t}\n\t\t\treturn messageList;\n\t\t},\n\t},\n\tmethods: {\n\t\tclearTopic(topic) {\n\t\t\tthis.$root.doPublish(topic, undefined);\n\t\t},\n\t\t/**\n\t\t * Removes client specific error topic from broker\n\t\t */\n\t\tdismissError() {\n\t\t\tthis.clearTopic(\n\t\t\t\t\"openWB/command/\" + this.$root.mqttClientId + \"/error\"\n\t\t\t);\n\t\t},\n\t\t/**\n\t\t * Removes system or client specific topics from broker\n\t\t */\n\t\tdismiss(event) {\n\t\t\tconsole.debug(\"removing message: \" + event.topic);\n\t\t\tthis.clearTopic(event.topic);\n\t\t},\n\t},\n};\n</script>\n\n<style scoped>\n.openwb-toast {\n\tz-index: 2000;\n\tright: 0;\n\ttop: 60px;\n}\n</style>\n","<template>\n\t<header>\n\t\t<nav-bar />\n\t</header>\n\t<div role=\"main\" class=\"container\">\n\t\t<div id=\"content\">\n\t\t\t<h1>{{ $route.meta.heading }}</h1>\n\t\t\t<router-view\n\t\t\t\t@save=\"saveValues\"\n\t\t\t\t@reset=\"resetValues\"\n\t\t\t\t@defaults=\"setDefaultValues\"\n\t\t\t\t@sendCommand=\"sendCommand\"\n\t\t\t/>\n\t\t</div>\n\t\t<donation-banner />\n\t</div>\n\t<page-footer />\n\t<messages />\n</template>\n\n<script>\n// @ is an alias to /src\nimport NavBar from \"@/components/OpenwbPageNavbar.vue\";\nimport PageFooter from \"@/components/OpenwbPageFooter.vue\";\nimport DonationBanner from \"@/components/OpenwbPageDonationBanner.vue\";\nimport Messages from \"@/components/OpenwbPageMessages.vue\";\nimport mqtt from \"mqtt\";\n\nexport default {\n\tname: \"settings-app\",\n\tcomponents: {\n\t\tNavBar,\n\t\tPageFooter,\n\t\tDonationBanner,\n\t\tMessages,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tclient: {\n\t\t\t\tconnected: false,\n\t\t\t},\n\t\t\tconnection: {\n\t\t\t\tprotocol: location.protocol == \"https:\" ? \"wss\" : \"ws\",\n\t\t\t\thost: location.hostname,\n\t\t\t\tport:\n\t\t\t\t\tparseInt(location.port) ||\n\t\t\t\t\t(location.protocol == \"https:\" ? 443 : 80),\n\t\t\t\tendpoint: \"/ws\",\n\t\t\t\tconnectTimeout: 4000,\n\t\t\t\treconnectPeriod: 4000,\n\t\t\t},\n\t\t};\n\t},\n\tcomputed: {\n\t\t/**\n\t\t * @return {Str} - Mqtt client id of our connection\n\t\t */\n\t\tmqttClientId() {\n\t\t\ttry {\n\t\t\t\treturn this.client.options.clientId;\n\t\t\t} catch (error) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * @return {Array} - Array of topics (String)\n\t\t */\n\t\ttopicList() {\n\t\t\treturn Object.keys(this.$store.state.mqtt);\n\t\t},\n\t\t/**\n\t\t * @return {String} - NODE_ENV\n\t\t */\n\t\tnodeEnv() {\n\t\t\treturn process.env.NODE_ENV;\n\t\t},\n\t\t/**\n\t\t * @return {String} - BASE_URL\n\t\t */\n\t\tpublicPath() {\n\t\t\treturn process.env.BASE_URL;\n\t\t},\n\t},\n\tmethods: {\n\t\t/**\n\t\t * Send topics to broker\n\t\t * @param {Array} topicsToSave - The topics to save\n\t\t */\n\t\tsaveValues(topicsToSave = undefined) {\n\t\t\tconsole.debug(\"saving values...\");\n\t\t\t// collect data\n\t\t\tlet topics = {};\n\t\t\tif (topicsToSave === undefined) {\n\t\t\t\t// no topics defined, so save everything we have in store\n\t\t\t\ttopics = this.$store.state.mqtt;\n\t\t\t} else {\n\t\t\t\tif (Array.isArray(topicsToSave)) {\n\t\t\t\t\ttopicsToSave.forEach((topicToSave) => {\n\t\t\t\t\t\ttopics[topicToSave] =\n\t\t\t\t\t\t\tthis.$store.state.mqtt[topicToSave];\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\"expected array, got \", typeof topicsToSave);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// console.debug(\"topics\", topics);\n\t\t\tfor (const [topic, payload] of Object.entries(topics)) {\n\t\t\t\tlet setTopic = topic.replace(\"openWB/\", \"openWB/set/\");\n\t\t\t\tconsole.debug(\"saving data:\", setTopic, payload);\n\t\t\t\tthis.doPublish(setTopic, payload);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Reload topics from broker\n\t\t * @param {Array} topicsToReset - The topics to reset\n\t\t */\n\t\tresetValues(topicsToReset = this.topicList) {\n\t\t\tconsole.debug(\"resetting values...\");\n\t\t\tconsole.debug(\"topics: \", topicsToReset);\n\t\t\t// simply unsubscribe and subscribe to broker\n\t\t\tthis.doUnsubscribe(topicsToReset);\n\t\t\tthis.doSubscribe(topicsToReset);\n\t\t},\n\t\t/**\n\t\t * ToDo\n\t\t */\n\t\tsetDefaultValues() {\n\t\t\tconsole.debug(\"setting default values... (ToDo)\");\n\t\t},\n\t\t/**\n\t\t * Sends a command via broker to the backend\n\t\t * @param {Object} event - Command object to send\n\t\t */\n\t\tsendCommand(event) {\n\t\t\tthis.doPublish(\n\t\t\t\t\"openWB/set/command/\" + this.client.options.clientId + \"/todo\",\n\t\t\t\tevent,\n\t\t\t\tfalse\n\t\t\t);\n\t\t},\n\t\t/**\n\t\t * Establishes a connection to the configured broker\n\t\t */\n\t\tcreateConnection() {\n\t\t\t// Connect string, and specify the connection method used through protocol\n\t\t\t// ws not encrypted WebSocket connection\n\t\t\t// wss encrypted WebSocket connection\n\t\t\t// mqtt not encrypted TCP connection\n\t\t\t// mqtts encrypted TCP connection\n\t\t\t// wxs WeChat mini app connection\n\t\t\t// alis Alipay mini app connection\n\t\t\tconst { protocol, host, port, endpoint, ...options } =\n\t\t\t\tthis.connection;\n\t\t\tconst connectUrl = `${protocol}://${host}:${port}${endpoint}`;\n\t\t\tconsole.debug(\"connecting to broker:\", connectUrl);\n\t\t\ttry {\n\t\t\t\tthis.client = mqtt.connect(connectUrl, options);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"mqtt.connect error\", error);\n\t\t\t}\n\t\t\tthis.client.on(\"connect\", () => {\n\t\t\t\tconsole.debug(\n\t\t\t\t\t\"Connection succeeded! ClientId: \",\n\t\t\t\t\tthis.client.options.clientId\n\t\t\t\t);\n\t\t\t});\n\t\t\tthis.client.on(\"error\", (error) => {\n\t\t\t\tconsole.error(\"Connection failed\", error);\n\t\t\t});\n\t\t\tthis.client.on(\"message\", (topic, message) => {\n\t\t\t\t// console.debug(\n\t\t\t\t// \t`Received message \"${message}\" from topic \"${topic}\"`\n\t\t\t\t// );\n\t\t\t\tif (message.toString().length > 0) {\n\t\t\t\t\tlet myPayload = undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tmyPayload = JSON.parse(message.toString());\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.debug(\n\t\t\t\t\t\t\t\"Json parsing failed, fallback to string: \",\n\t\t\t\t\t\t\ttopic\n\t\t\t\t\t\t);\n\t\t\t\t\t\tmyPayload = message.toString();\n\t\t\t\t\t}\n\t\t\t\t\tthis.$store.commit(\"addTopic\", {\n\t\t\t\t\t\ttopic: topic,\n\t\t\t\t\t\tpayload: myPayload,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.$store.commit(\"removeTopic\", topic);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdoSubscribe(topics) {\n\t\t\tthis.client.subscribe(topics, {}, (error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.error(\"Subscribe to topics error\", error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdoUnsubscribe(topics) {\n\t\t\tthis.client.unsubscribe(topics, (error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.error(\"Unsubscribe error\", error);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdoPublish(topic, payload, retain = true, qos = 2) {\n\t\t\tlet options = {\n\t\t\t\tqos: qos,\n\t\t\t\tretain: retain,\n\t\t\t};\n\t\t\tthis.client.publish(\n\t\t\t\ttopic,\n\t\t\t\tJSON.stringify(payload),\n\t\t\t\toptions,\n\t\t\t\t(error) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tconsole.log(\"Publish error\", error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\t},\n\tcreated() {\n\t\tthis.createConnection();\n\t},\n};\n</script>\n\n<style>\n#app {\n\tfont-family: Avenir, Helvetica, Arial, sans-serif;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n}\n\n.container[role=\"main\"] {\n\tpadding: 60px 15px 30px;\n}\n</style>\n","<template>\n\t<div class=\"form-row mb-1\">\n\t\t<label v-on:click=\"toggleHelp\" class=\"col-md-4 col-form-label\">\n\t\t\t{{ title }}\n\t\t\t<font-awesome-icon\n\t\t\t\tv-if=\"$slots.help\"\n\t\t\t\t:icon=\"\n\t\t\t\t\tshowHelp\n\t\t\t\t\t\t? ['fas', 'question-circle']\n\t\t\t\t\t\t: ['far', 'question-circle']\n\t\t\t\t\"\n\t\t\t\t:class=\"showHelp ? 'text-info' : ''\"\n\t\t\t/>\n\t\t</label>\n\t\t<div class=\"col-md-8\">\n\t\t\t<div class=\"form-row\">\n\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t<div class=\"input-group-prepend\">\n\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'tag']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\tref=\"tagInput\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model=\"newTag\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t\t@keyup.enter=\"addTag\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div class=\"input-group-append\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass=\"input-group-text\"\n\t\t\t\t\t\t\t:class=\"\n\t\t\t\t\t\t\t\tnewTagValid\n\t\t\t\t\t\t\t\t\t? 'bg-success clickable'\n\t\t\t\t\t\t\t\t\t: 'notClickable'\n\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t\t@click=\"addTag\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'plus']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"form-row tagList mt-1\">\n\t\t\t\t<span v-if=\"value.length == 0\" class=\"noTag\">\n\t\t\t\t\t<font-awesome-icon :icon=\"['fas', 'info-circle']\" />\n\t\t\t\t\t{{ noElementsMessage }}\n\t\t\t\t</span>\n\t\t\t\t<span\n\t\t\t\t\tclass=\"tag\"\n\t\t\t\t\tv-for=\"(tag, index) in value\"\n\t\t\t\t\tv-bind:key=\"index\"\n\t\t\t\t>\n\t\t\t\t\t<font-awesome-icon :icon=\"['fas', 'tag']\" />\n\t\t\t\t\t{{ tag }}\n\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\tclass=\"clickable\"\n\t\t\t\t\t\t:icon=\"['fas', 'times-circle']\"\n\t\t\t\t\t\t@click=\"removeTag(index)\"\n\t\t\t\t\t/>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<span v-if=\"showHelp\" class=\"form-row alert alert-info my-1 small\">\n\t\t\t\t<slot name=\"help\"></slot>\n\t\t\t</span>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n\tfaQuestionCircle as fasQuestionCircle,\n\tfaTag as fasTag,\n\tfaTimesCircle as fasTimesCircle,\n\tfaPlus as fasPlus,\n\tfaInfoCircle as fasInfoCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faQuestionCircle as farQuestionCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/vue-fontawesome\";\n\nlibrary.add(\n\tfasQuestionCircle,\n\tfarQuestionCircle,\n\tfasTag,\n\tfasTimesCircle,\n\tfasPlus,\n\tfasInfoCircle\n);\n\nexport default {\n\tname: \"OpenwbArrayInput\",\n\tinheritAttrs: false,\n\tprops: {\n\t\ttitle: String,\n\t\tmodelValue: {\n\t\t\ttype: Array,\n\t\t\tdefault: () => {\n\t\t\t\treturn [];\n\t\t\t},\n\t\t},\n\t\tnoElementsMessage: {\n\t\t\ttype: String,\n\t\t\tdefault: () => {\n\t\t\t\treturn \"Keine Elemente zugeordnet.\";\n\t\t\t},\n\t\t},\n\t},\n\temits: [\"update:modelValue\"],\n\tdata() {\n\t\treturn {\n\t\t\tnewTag: \"\",\n\t\t\tshowHelp: false,\n\t\t};\n\t},\n\tcomputed: {\n\t\tvalue: {\n\t\t\tget() {\n\t\t\t\treturn this.modelValue;\n\t\t\t},\n\t\t\tset(newValue) {\n\t\t\t\tthis.$emit(\"update:modelValue\", newValue);\n\t\t\t},\n\t\t},\n\t\tnewTagValid: {\n\t\t\tget() {\n\t\t\t\treturn (\n\t\t\t\t\tthis.newTag.length > 0 &&\n\t\t\t\t\tthis.value.indexOf(this.newTag) == -1\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t},\n\tmethods: {\n\t\ttoggleHelp() {\n\t\t\tthis.showHelp = !this.showHelp && this.$slots.help !== undefined;\n\t\t},\n\t\taddTag() {\n\t\t\tif (this.newTagValid) {\n\t\t\t\tlet tempValue = this.value;\n\t\t\t\ttempValue.push(this.newTag);\n\t\t\t\ttempValue.sort();\n\t\t\t\tthis.value = tempValue;\n\t\t\t\tthis.newTag = \"\";\n\t\t\t}\n\t\t\tthis.$refs.tagInput.focus();\n\t\t},\n\t\tremoveTag(index) {\n\t\t\tlet tempValue = this.value;\n\t\t\ttempValue.splice(index, 1);\n\t\t\tthis.value = tempValue;\n\t\t},\n\t},\n\tcomponents: {\n\t\tFontAwesomeIcon,\n\t},\n};\n</script>\n\n<style scoped>\n.clickable {\n\tcursor: pointer;\n}\n\n.notClickable {\n\tcursor: not-allowed;\n}\n\ninput.invalid,\ninput:invalid {\n\tborder: 2px solid var(--danger);\n}\n\n.tagList {\n\tbackground-color: #e9ecef;\n\tborder: 1px solid #ced4da;\n\tborder-radius: 0.25rem;\n\tpadding: 5px 5px 0 5px;\n}\n\n.tag,\n.noTag {\n\tborder-radius: 10px;\n\tpadding: 2px 5px;\n\tmargin-right: 10px;\n\tmargin-bottom: 5px;\n}\n\n.noTag {\n\tcolor: var(--gray);\n\tfont-style: italic;\n}\n\n.tag {\n\tbackground-color: var(--success);\n}\n</style>\n","<template>\n\t<div class=\"avatar\">\n\t\t<slot>?</slot>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tname: \"OpenwbAvatar\",\n};\n</script>\n\n<style scoped>\n.avatar {\n\tdisplay: inline-flex;\n\tjustify-content: center;\n\talign-items: center;\n\twidth: 2.5em;\n\theight: 2.5em;\n\tborder-radius: 50%;\n}\n</style>\n","<template>\n\t<div class=\"card\" :class=\"'border-' + subtype\">\n\t\t<div\n\t\t\tclass=\"card-header py-1\"\n\t\t\t:class=\"'bg-' + subtype\"\n\t\t\t@click=\"toggleBody\"\n\t\t>\n\t\t\t<div class=\"form-group mb-0\">\n\t\t\t\t<div class=\"form-row vaRow mb-0 py-2\">\n\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t<slot name=\"header\" :collapsed=\"isCollapsed\">\n\t\t\t\t\t\t\t{{ title }}\n\t\t\t\t\t\t</slot>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<span class=\"card-actions ml-4\">\n\t\t\t\t<span v-if=\"$slots.actions\" class=\"card-actions mr-4\">\n\t\t\t\t\t<slot name=\"actions\" :collapsed=\"isCollapsed\" />\n\t\t\t\t</span>\n\t\t\t\t<font-awesome-icon\n\t\t\t\t\tv-if=\"collapsible\"\n\t\t\t\t\tfixed-width\n\t\t\t\t\t:icon=\"\n\t\t\t\t\t\tisCollapsed\n\t\t\t\t\t\t\t? ['fas', 'chevron-right']\n\t\t\t\t\t\t\t: ['fas', 'chevron-down']\n\t\t\t\t\t\"\n\t\t\t\t/>\n\t\t\t</span>\n\t\t</div>\n\t\t<div class=\"card-body\" v-if=\"isCollapsed === false\">\n\t\t\t<slot></slot>\n\t\t</div>\n\t\t<div v-if=\"$slots.footer && isCollapsed === false\" class=\"card-footer\">\n\t\t\t<slot name=\"footer\"></slot>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n\tfaChevronRight as fasChevronRight,\n\tfaChevronDown as fasChevronDown,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/vue-fontawesome\";\n\nlibrary.add(fasChevronRight, fasChevronDown);\n\nexport default {\n\tname: \"OpenwbCard\",\n\tcomponents: {\n\t\tFontAwesomeIcon,\n\t},\n\tprops: {\n\t\ttitle: { type: String, default: \"# no title set #\" },\n\t\tsubtype: {\n\t\t\tvalidator: function (value) {\n\t\t\t\treturn (\n\t\t\t\t\t[\n\t\t\t\t\t\t\"info\",\n\t\t\t\t\t\t\"success\",\n\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\"danger\",\n\t\t\t\t\t\t\"primary\",\n\t\t\t\t\t\t\"secondary\",\n\t\t\t\t\t\t\"light\",\n\t\t\t\t\t\t\"dark\",\n\t\t\t\t\t].indexOf(value) !== -1\n\t\t\t\t);\n\t\t\t},\n\t\t\tdefault: \"secondary\",\n\t\t},\n\t\tcollapsible: { type: Boolean, default: false },\n\t\tcollapsed: { type: Boolean, default: false },\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tisCollapsed: this.collapsible && this.collapsed,\n\t\t};\n\t},\n\tmethods: {\n\t\ttoggleBody() {\n\t\t\tif (this.collapsible === true) {\n\t\t\t\tthis.isCollapsed = !this.isCollapsed;\n\t\t\t}\n\t\t},\n\t},\n};\n</script>\n\n<style>\n.card {\n\tmargin-bottom: 1rem;\n}\n\n.card .card-header {\n\tfont-weight: bold;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n}\n\n.card .card-header .subheader {\n\tfont-weight: normal;\n\tfont-size: 75%;\n}\n\n.card-actions {\n\tdisplay: flex;\n\talign-items: center;\n}\n\n.card-actions .pill {\n\tborder-radius: 10px;\n\tpadding: 5px;\n}\n\n.bg-primary,\n.bg-secondary,\n.bg-danger,\n.bg-success,\n.bg-dark {\n\tcolor: white;\n}\n\n.bg-warning,\n.bg-info,\n.bg-light {\n\tcolor: #212529;\n}\n\n.card-header.bg-secondary .btn-outline-info:not(.active):not(:hover),\n.card-header.bg-success .btn-outline-info:not(.active):not(:hover),\n.card-header.bg-primary .btn-outline-info:not(.active):not(:hover) {\n\tbackground-color: white;\n}\n\n.card-header.bg-success .btn-outline-info.focus {\n\tbox-shadow: 0 0 0 0.2rem white;\n}\n\n.card-header.bg-success .btn-outline-info.active,\n.card-header.bg-success .btn-outline-info:hover {\n\tborder-color: white;\n}\n</style>\n","<template>\n\t<button type=\"button\" class=\"btn btn-block\" @click=\"click\">\n\t\t<slot>{{ title }}</slot>\n\t</button>\n</template>\n\n<script>\nexport default {\n\tname: \"OpenwbClickButton\",\n\tprops: {\n\t\ttitle: String,\n\t},\n\temits: [\"buttonClicked\"],\n\tmethods: {\n\t\tclick(event) {\n\t\t\tthis.$emit(\"buttonClicked\", event);\n\t\t},\n\t},\n};\n</script>\n\n<style scoped>\nbutton:not(:disabled) {\n\tcursor: pointer;\n}\n</style>\n","<template>\n\t<span\n\t\t:title=\"clipboardApiAvailable ? tooltip : ''\"\n\t\t:class=\"clipboardApiAvailable ? 'copy-me' : ''\"\n\t\t@click=\"click\"\n\t>\n\t\t<slot />\n\t\t<font-awesome-icon\n\t\t\tv-if=\"clipboardApiAvailable\"\n\t\t\tfixed-width\n\t\t\t:icon=\"isCopied ? ['fas', 'clipboard-check'] : ['fas', 'clipboard']\"\n\t\t/>\n\t</span>\n</template>\n\n<script>\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n\tfaClipboard as fasClipboard,\n\tfaClipboardCheck as fasClipboardCheck,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/vue-fontawesome\";\n\nlibrary.add(fasClipboard, fasClipboardCheck);\n\nexport default {\n\tname: \"OpenwbCopyToClipboard\",\n\tcomponents: {\n\t\tFontAwesomeIcon,\n\t},\n\tprops: {\n\t\ttooltip: { type: String, default: \"Wert kopieren\" },\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tclipboardApiAvailable: navigator.clipboard != undefined,\n\t\t\tisCopied: false,\n\t\t};\n\t},\n\tmethods: {\n\t\tclick(event) {\n\t\t\tconsole.debug(\"copyToClipboard\", event.target.innerText);\n\t\t\tif (this.clipboardApiAvailable) {\n\t\t\t\tnavigator.clipboard.writeText(event.target.innerText).then(\n\t\t\t\t\t() => {\n\t\t\t\t\t\tthis.isCopied = true;\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconsole.error(\"copy to clipboard failed\");\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n};\n</script>\n\n<style scoped>\nspan.copy-me {\n\tcursor: copy;\n}\n</style>\n","<template>\n\t<div class=\"card-text card-text-heading\">\n\t\t<slot />\n\t\t<span v-if=\"$slots.actions\" class=\"actions\">\n\t\t\t<slot name=\"actions\" />\n\t\t</span>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tname: \"OpenwbHeading\",\n};\n</script>\n\n<style scoped>\n.card-text-heading {\n\tfont-size: 125%;\n\tfont-weight: bold;\n\tmargin-top: 1rem;\n\tmargin-bottom: 0.5rem;\n\tdisplay: flex;\n\tjustify-content: space-between;\n}\n\n.card-text-heading .actions {\n\tfont-weight: normal;\n\tfont-size: 75%;\n}\n</style>\n","<template>\n\t<div class=\"form-row mb-1\">\n\t\t<label v-on:click=\"toggleHelp\" class=\"col-md-4 col-form-label\">\n\t\t\t{{ title }}\n\t\t\t<font-awesome-icon\n\t\t\t\tv-if=\"$slots.help\"\n\t\t\t\t:icon=\"\n\t\t\t\t\tshowHelp\n\t\t\t\t\t\t? ['fas', 'question-circle']\n\t\t\t\t\t\t: ['far', 'question-circle']\n\t\t\t\t\"\n\t\t\t\t:class=\"showHelp ? 'text-info' : ''\"\n\t\t\t/>\n\t\t</label>\n\t\t<div class=\"col-md-8\">\n\t\t\t<div class=\"form-row\">\n\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t<div class=\"input-group-prepend\">\n\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'calculator']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model.number=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div v-if=\"unit\" class=\"input-group-append\">\n\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t{{ unit }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<span v-if=\"showHelp\" class=\"form-row alert alert-info my-1 small\">\n\t\t\t\t<slot name=\"help\"></slot>\n\t\t\t</span>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n\tfaQuestionCircle as fasQuestionCircle,\n\tfaCalculator as fasCalculator,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faQuestionCircle as farQuestionCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/vue-fontawesome\";\n\nlibrary.add(fasQuestionCircle, farQuestionCircle, fasCalculator);\n\nexport default {\n\tname: \"OpenwbNumberInput\",\n\tinheritAttrs: false,\n\tprops: {\n\t\ttitle: String,\n\t\tmodelValue: { type: Number },\n\t\tunit: String,\n\t\temptyValue: { required: false, default: null },\n\t},\n\temits: [\"update:modelValue\"],\n\tdata() {\n\t\treturn {\n\t\t\tshowHelp: false,\n\t\t};\n\t},\n\tcomputed: {\n\t\tvalue: {\n\t\t\tget() {\n\t\t\t\treturn this.modelValue;\n\t\t\t},\n\t\t\tset(newValue) {\n\t\t\t\tif (isNaN(newValue) || typeof newValue != \"number\") {\n\t\t\t\t\tnewValue = this.emptyValue;\n\t\t\t\t}\n\t\t\t\tthis.$emit(\"update:modelValue\", newValue);\n\t\t\t},\n\t\t},\n\t},\n\tmethods: {\n\t\ttoggleHelp() {\n\t\t\tthis.showHelp = !this.showHelp && this.$slots.help !== undefined;\n\t\t},\n\t},\n\tcomponents: {\n\t\tFontAwesomeIcon,\n\t},\n};\n</script>\n\n<style scoped>\ninput.invalid,\ninput:invalid {\n\tbackground-color: pink;\n}\n\n/* hide spinner buttons if input element is readonly or disabled */\n/* Chrome, Safari, Edge, Opera */\ninput[readonly]::-webkit-outer-spin-button,\ninput[readonly]::-webkit-inner-spin-button,\ninput[disabled]::-webkit-outer-spin-button,\ninput[disabled]::-webkit-inner-spin-button {\n\t-webkit-appearance: none;\n\tmargin: 0;\n}\n\n/* Firefox */\ninput[readonly][type=\"number\"],\ninput[disabled][type=\"number\"] {\n\t-moz-appearance: textfield;\n}\n</style>\n","<template>\n\t<div class=\"form-row mb-1\">\n\t\t<label v-on:click=\"toggleHelp\" class=\"col-md-4 col-form-label\">\n\t\t\t{{ title }}\n\t\t\t<font-awesome-icon\n\t\t\t\tv-if=\"$slots.help\"\n\t\t\t\t:icon=\"\n\t\t\t\t\tshowHelp\n\t\t\t\t\t\t? ['fas', 'question-circle']\n\t\t\t\t\t\t: ['far', 'question-circle']\n\t\t\t\t\"\n\t\t\t\t:class=\"showHelp ? 'text-info' : ''\"\n\t\t\t/>\n\t\t</label>\n\t\t<div class=\"col-md-8\">\n\t\t\t<div class=\"form-row vaRow mb-1\">\n\t\t\t\t<label v-if=\"label\" class=\"col-2 col-form-label valueLabel\">\n\t\t\t\t\t{{ label }}\n\t\t\t\t</label>\n\t\t\t\t<button\n\t\t\t\t\tclass=\"col-1 btn btn-block btn-info\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t@click=\"decrement\"\n\t\t\t\t>\n\t\t\t\t\t<font-awesome-icon :icon=\"['fas', 'step-backward']\" />\n\t\t\t\t</button>\n\t\t\t\t<div class=\"col\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\tclass=\"form-control-range rangeInput\"\n\t\t\t\t\t\t:min=\"min\"\n\t\t\t\t\t\t:max=\"max\"\n\t\t\t\t\t\t:step=\"step\"\n\t\t\t\t\t\tv-model.number=\"sliderValue\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\tclass=\"col-1 btn btn-block btn-info\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t@click=\"increment\"\n\t\t\t\t>\n\t\t\t\t\t<font-awesome-icon :icon=\"['fas', 'step-forward']\" />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div v-if=\"showHelp\" class=\"form-row alert alert-info my-1 small\">\n\t\t\t\t<div class=\"col\">\n\t\t\t\t\t<slot name=\"help\"></slot>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n\tfaQuestionCircle as fasQuestionCircle,\n\tfaStepForward as fasStepForward,\n\tfaStepBackward as fasStepBackward,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faQuestionCircle as farQuestionCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/vue-fontawesome\";\n\nlibrary.add(\n\tfasQuestionCircle,\n\tfarQuestionCircle,\n\tfasStepForward,\n\tfasStepBackward\n);\n\nexport default {\n\tname: \"OpenwbRangeInput\",\n\tinheritAttrs: false,\n\tprops: {\n\t\ttitle: String,\n\t\tmodelValue: { type: Number },\n\t\tunit: String,\n\t\tmin: { type: Number, default: 0 },\n\t\tmax: { type: Number, default: 100 },\n\t\tstep: { type: Number, default: 1 },\n\t\tlabels: { type: Array },\n\t},\n\temits: [\"update:modelValue\"],\n\tdata() {\n\t\treturn {\n\t\t\tshowHelp: false,\n\t\t};\n\t},\n\tcomputed: {\n\t\tlabel() {\n\t\t\tvar currentLabel;\n\t\t\tif (this.labels && this.sliderValue != undefined) {\n\t\t\t\tif (this.sliderValue < this.labels.length) {\n\t\t\t\t\tcurrentLabel = this.labels[this.sliderValue].label;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\"index out of bounds: \" + this.sliderValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentLabel = this.sliderValue;\n\t\t\t}\n\t\t\tif (typeof currentLabel == \"number\") {\n\t\t\t\tcurrentLabel = currentLabel.toLocaleString(undefined, {\n\t\t\t\t\tminimumFractionDigits: this.precision,\n\t\t\t\t\tmaximumFractionDigits: this.precision,\n\t\t\t\t});\n\t\t\t\tif (this.unit) {\n\t\t\t\t\tcurrentLabel += \" \" + this.unit;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn currentLabel;\n\t\t},\n\t\tprecision() {\n\t\t\tif (!isFinite(this.step)) return 0;\n\t\t\tvar e = 1,\n\t\t\t\tp = 0;\n\t\t\twhile (Math.round(this.step * e) / e !== this.step) {\n\t\t\t\te *= 10;\n\t\t\t\tp++;\n\t\t\t}\n\t\t\treturn p;\n\t\t},\n\t\tsliderValue: {\n\t\t\tget() {\n\t\t\t\tif (this.labels) {\n\t\t\t\t\tvar myValue = undefined;\n\t\t\t\t\tfor (let index = 0; index < this.labels.length; index++) {\n\t\t\t\t\t\tif (this.labels[index].value == this.modelValue) {\n\t\t\t\t\t\t\tmyValue = index;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tmyValue === undefined &&\n\t\t\t\t\t\tthis.modelValue !== undefined\n\t\t\t\t\t) {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\"sliderValue: not found in values: \",\n\t\t\t\t\t\t\tthis.modelValue,\n\t\t\t\t\t\t\t\"using min as default: \",\n\t\t\t\t\t\t\tthis.min\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn this.min;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn myValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.modelValue;\n\t\t\t},\n\t\t\tset(newSliderValue) {\n\t\t\t\tif (this.labels) {\n\t\t\t\t\tvar myValue = this.labels[newSliderValue].value;\n\t\t\t\t\tthis.$emit(\"update:modelValue\", myValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis.$emit(\"update:modelValue\", newSliderValue);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\tvalue: {\n\t\t\tget() {\n\t\t\t\treturn this.modelValue;\n\t\t\t},\n\t\t\tset(newValue) {\n\t\t\t\tthis.$emit(\"update:modelValue\", newValue);\n\t\t\t},\n\t\t},\n\t},\n\tmethods: {\n\t\ttoggleHelp() {\n\t\t\tthis.showHelp = !this.showHelp && this.$slots.help !== undefined;\n\t\t},\n\t\tincrement() {\n\t\t\tvar newSliderValue = Math.min(\n\t\t\t\tthis.sliderValue + this.step,\n\t\t\t\tthis.max\n\t\t\t);\n\t\t\t// rounding needed!\n\t\t\tthis.sliderValue =\n\t\t\t\tMath.round(newSliderValue * Math.pow(10, this.precision)) /\n\t\t\t\tMath.pow(10, this.precision);\n\t\t},\n\t\tdecrement() {\n\t\t\tvar newSliderValue = Math.max(\n\t\t\t\tthis.sliderValue - this.step,\n\t\t\t\tthis.min\n\t\t\t);\n\t\t\t// rounding needed!\n\t\t\tthis.sliderValue =\n\t\t\t\tMath.round(newSliderValue * Math.pow(10, this.precision)) /\n\t\t\t\tMath.pow(10, this.precision);\n\t\t},\n\t},\n\tcomponents: {\n\t\tFontAwesomeIcon,\n\t},\n};\n</script>\n\n<style scoped>\n.vaRow {\n\t/* vertical alignment of content in rows */\n\tdisplay: flex;\n\talign-items: center;\n}\n</style>\n","<template>\n\t<div class=\"form-row mb-1\">\n\t\t<label v-on:click=\"toggleHelp\" class=\"col-md-4 col-form-label\">\n\t\t\t{{ title }}\n\t\t\t<font-awesome-icon\n\t\t\t\tv-if=\"$slots.help\"\n\t\t\t\t:icon=\"\n\t\t\t\t\tshowHelp\n\t\t\t\t\t\t? ['fas', 'question-circle']\n\t\t\t\t\t\t: ['far', 'question-circle']\n\t\t\t\t\"\n\t\t\t\t:class=\"showHelp ? 'text-info' : ''\"\n\t\t\t/>\n\t\t</label>\n\t\t<div class=\"col-md-8\">\n\t\t\t<div class=\"form-row\">\n\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t<div class=\"input-group-prepend\">\n\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'text'\"\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'keyboard']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'email'\"\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'envelope']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'host'\"\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'network-wired']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'url'\"\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'globe']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'user'\"\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'user']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'json'\"\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'code']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'password'\"\n\t\t\t\t\t\t\t\t:icon=\"\n\t\t\t\t\t\t\t\t\tshowPassword\n\t\t\t\t\t\t\t\t\t\t? ['fas', 'unlock']\n\t\t\t\t\t\t\t\t\t\t: ['fas', 'lock']\n\t\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'time'\"\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'clock']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'date' || subtype == 'month'\"\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'calendar-day']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-if=\"['text', 'user'].includes(subtype)\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\t:class=\"{ invalid: inputInvalid }\"\n\t\t\t\t\t\tv-model=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t\t:pattern=\"pattern\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-if=\"subtype == 'json'\"\n\t\t\t\t\t\tref=\"jsonInput\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t\t:pattern=\"pattern\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-if=\"subtype == 'password'\"\n\t\t\t\t\t\t:type=\"showPassword ? 'text' : 'password'\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t\t:pattern=\"pattern\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-if=\"subtype == 'host'\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-if=\"['email', 'url'].includes(subtype)\"\n\t\t\t\t\t\t:type=\"subtype\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if=\"subtype == 'password'\"\n\t\t\t\t\t\tclass=\"input-group-append clickable\"\n\t\t\t\t\t\t@click=\"togglePassword\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\t:icon=\"\n\t\t\t\t\t\t\t\t\tshowPassword\n\t\t\t\t\t\t\t\t\t\t? ['far', 'eye']\n\t\t\t\t\t\t\t\t\t\t: ['far', 'eye-slash']\n\t\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-if=\"subtype == 'time'\"\n\t\t\t\t\t\ttype=\"time\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-if=\"subtype == 'date'\"\n\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-if=\"subtype == 'month'\"\n\t\t\t\t\t\ttype=\"month\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div v-if=\"unit\" class=\"input-group-append\">\n\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t{{ unit }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<span v-if=\"showHelp\" class=\"form-row alert alert-info my-1 small\">\n\t\t\t\t<slot name=\"help\"></slot>\n\t\t\t</span>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n\tfaQuestionCircle as fasQuestionCircle,\n\tfaKeyboard as fasKeyboard,\n\tfaEnvelope as fasEnvelope,\n\tfaNetworkWired as fasNetworkWired,\n\tfaGlobe as fasGlobe,\n\tfaUser as fasUser,\n\tfaCode as fasCode,\n\tfaLock as fasLock,\n\tfaUnlock as fasUnlock,\n\tfaClock as fasClock,\n\tfaCalendarDay as fasCalendarDay,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n\tfaQuestionCircle as farQuestionCircle,\n\tfaEye as farEye,\n\tfaEyeSlash as farEyeSlash,\n} from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/vue-fontawesome\";\n\nlibrary.add(\n\tfasQuestionCircle,\n\tfarQuestionCircle,\n\tfasKeyboard,\n\tfasEnvelope,\n\tfasNetworkWired,\n\tfasGlobe,\n\tfasUser,\n\tfasCode,\n\tfasLock,\n\tfasUnlock,\n\tfasClock,\n\tfasCalendarDay,\n\tfarEye,\n\tfarEyeSlash\n);\n\nexport default {\n\tname: \"OpenwbTextInput\",\n\tinheritAttrs: false,\n\tprops: {\n\t\ttitle: String,\n\t\tmodelValue: { type: [String, Object] },\n\t\tsubtype: {\n\t\t\tvalidator: function (value) {\n\t\t\t\treturn (\n\t\t\t\t\t[\n\t\t\t\t\t\t\"text\",\n\t\t\t\t\t\t\"email\",\n\t\t\t\t\t\t\"host\",\n\t\t\t\t\t\t\"url\",\n\t\t\t\t\t\t\"user\",\n\t\t\t\t\t\t\"json\",\n\t\t\t\t\t\t\"password\",\n\t\t\t\t\t\t\"time\",\n\t\t\t\t\t\t\"date\",\n\t\t\t\t\t\t\"month\",\n\t\t\t\t\t].indexOf(value) !== -1\n\t\t\t\t);\n\t\t\t},\n\t\t\tdefault: \"text\",\n\t\t},\n\t\tpattern: String,\n\t\tunit: String,\n\t\temptyValue: { required: false, default: null },\n\t},\n\temits: [\"update:modelValue\"],\n\tdata() {\n\t\treturn {\n\t\t\tshowHelp: false,\n\t\t\tshowPassword: false,\n\t\t\tinputInvalid: false,\n\t\t\ttempValue: this.modelValue,\n\t\t};\n\t},\n\tcomputed: {\n\t\tvalue: {\n\t\t\tget() {\n\t\t\t\tif (this.subtype == \"json\") {\n\t\t\t\t\tif (this.inputInvalid) {\n\t\t\t\t\t\tconsole.warn(\"returning invalid String\");\n\t\t\t\t\t\treturn this.tempValue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn JSON.stringify(this.tempValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.modelValue;\n\t\t\t},\n\t\t\tset(newValue) {\n\t\t\t\tif (this.subtype == \"json\") {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet myNewJsonValue = JSON.parse(newValue);\n\t\t\t\t\t\tthis.inputInvalid = false;\n\t\t\t\t\t\tthis.$refs.jsonInput.setCustomValidity(\"\");\n\t\t\t\t\t\tthis.tempValue = myNewJsonValue;\n\t\t\t\t\t\tthis.$emit(\"update:modelValue\", myNewJsonValue);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error(\"parsing JSON failed: \" + newValue);\n\t\t\t\t\t\tthis.inputInvalid = true;\n\t\t\t\t\t\tthis.$refs.jsonInput.setCustomValidity(\n\t\t\t\t\t\t\t\"Ungültiger JSON Ausdruck!\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.tempValue = newValue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (newValue == \"\") {\n\t\t\t\t\t\tconsole.log(this.emptyValue);\n\t\t\t\t\t\tnewValue = this.emptyValue;\n\t\t\t\t\t}\n\t\t\t\t\tthis.$emit(\"update:modelValue\", newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n\tmethods: {\n\t\ttoggleHelp() {\n\t\t\tthis.showHelp = !this.showHelp && this.$slots.help !== undefined;\n\t\t},\n\t\ttogglePassword() {\n\t\t\tthis.showPassword = !this.showPassword;\n\t\t},\n\t},\n\tcomponents: {\n\t\tFontAwesomeIcon,\n\t},\n};\n</script>\n\n<style scoped>\n.clickable {\n\tcursor: pointer;\n}\n\ninput:invalid {\n\tbackground-color: pink;\n}\n</style>\n","<template>\n\t<div class=\"form-row mb-1\">\n\t\t<label v-on:click=\"toggleHelp\" class=\"col-md-4 col-form-label\">\n\t\t\t{{ title }}\n\t\t\t<font-awesome-icon\n\t\t\t\tv-if=\"$slots.help\"\n\t\t\t\t:icon=\"\n\t\t\t\t\tshowHelp\n\t\t\t\t\t\t? ['fas', 'question-circle']\n\t\t\t\t\t\t: ['far', 'question-circle']\n\t\t\t\t\"\n\t\t\t\t:class=\"showHelp ? 'text-info' : ''\"\n\t\t\t/>\n\t\t</label>\n\t\t<div class=\"col-md-8\">\n\t\t\t<div class=\"form-row\">\n\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t<div class=\"input-group-prepend\">\n\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'text'\"\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'keyboard']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<font-awesome-icon\n\t\t\t\t\t\t\t\tfixed-width\n\t\t\t\t\t\t\t\tv-if=\"subtype == 'json'\"\n\t\t\t\t\t\t\t\t:icon=\"['fas', 'code']\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tref=\"jsonInput\"\n\t\t\t\t\t\tv-if=\"subtype === 'json'\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model.lazy=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t></textarea>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tv-else\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tv-model=\"value\"\n\t\t\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\t\t></textarea>\n\t\t\t\t\t<div v-if=\"$attrs.maxlength\" class=\"input-group-append\">\n\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t<small class=\"form-text text-muted text-right\">\n\t\t\t\t\t\t\t\t{{ length }} / {{ $attrs.maxlength }}\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<span v-if=\"showHelp\" class=\"form-row alert alert-info my-1 small\">\n\t\t\t\t<slot name=\"help\"></slot>\n\t\t\t</span>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faQuestionCircle as fasQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { faQuestionCircle as farQuestionCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/vue-fontawesome\";\n\nlibrary.add(fasQuestionCircle, farQuestionCircle);\n\nexport default {\n\tname: \"OpenwbTextareaInput\",\n\tinheritAttrs: false,\n\tprops: {\n\t\ttitle: String,\n\t\tmodelValue: { String, Object },\n\t\tsubtype: {\n\t\t\tvalidator: function (value) {\n\t\t\t\treturn [\"text\", \"json\"].indexOf(value) !== -1;\n\t\t\t},\n\t\t\tdefault: \"text\",\n\t\t},\n\t},\n\temits: [\"update:modelValue\"],\n\tdata() {\n\t\treturn {\n\t\t\tshowHelp: false,\n\t\t\tinputInvalid: false,\n\t\t\ttempValue: this.modelValue,\n\t\t};\n\t},\n\tcomputed: {\n\t\tvalue: {\n\t\t\tget() {\n\t\t\t\tif (this.subtype == \"json\") {\n\t\t\t\t\tif (this.inputInvalid) {\n\t\t\t\t\t\tconsole.debug(\"returning invalid String\");\n\t\t\t\t\t\treturn this.tempValue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn JSON.stringify(this.tempValue, undefined, 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.modelValue;\n\t\t\t},\n\t\t\tset(newValue) {\n\t\t\t\tif (this.subtype == \"json\") {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet myNewJsonValue = JSON.parse(newValue);\n\t\t\t\t\t\tthis.inputInvalid = false;\n\t\t\t\t\t\tthis.$refs.jsonInput.setCustomValidity(\"\");\n\t\t\t\t\t\tthis.tempValue = myNewJsonValue;\n\t\t\t\t\t\tthis.$emit(\"update:modelValue\", myNewJsonValue);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn(\"parsing JSON failed: \" + newValue);\n\t\t\t\t\t\tthis.inputInvalid = true;\n\t\t\t\t\t\tthis.$refs.jsonInput.setCustomValidity(\n\t\t\t\t\t\t\t\"Ungültiger JSON Ausdruck!\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.tempValue = newValue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.$emit(\"update:modelValue\", newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\tlength: {\n\t\t\tget() {\n\t\t\t\tif (this.value !== undefined) {\n\t\t\t\t\treturn this.value.length;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n\tmethods: {\n\t\ttoggleHelp() {\n\t\t\tthis.showHelp = !this.showHelp && this.$slots.help !== undefined;\n\t\t},\n\t},\n\tcomponents: {\n\t\tFontAwesomeIcon,\n\t},\n};\n</script>\n\n<style scoped>\ntextarea:invalid {\n\tbackground-color: pink;\n}\n</style>\n","<template>\n\t<div class=\"toast\" :class=\"'border-' + subtype\" role=\"alert\">\n\t\t<div class=\"toast-header\" :class=\"'bg-' + subtype\">\n\t\t\t<strong class=\"pr-2 mr-auto\">OpenWB</strong>\n\t\t\t<small v-if=\"timestamp\" class=\"time-diff\">{{ relativeTime }}</small>\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclass=\"ml-2 mb-1 close\"\n\t\t\t\tdata-dismiss=\"toast\"\n\t\t\t\taria-label=\"Close\"\n\t\t\t\t@click=\"dismiss\"\n\t\t\t>\n\t\t\t\t<span aria-hidden=\"true\">&times;</span>\n\t\t\t</button>\n\t\t</div>\n\t\t<div class=\"toast-body\">\n\t\t\t<slot />\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tname: \"OpenwbToast\",\n\temits: [\"dismiss\"],\n\tprops: {\n\t\ttopic: { type: String, required: true },\n\t\tsubtype: {\n\t\t\tvalidator: function (value) {\n\t\t\t\treturn (\n\t\t\t\t\t[\n\t\t\t\t\t\t\"info\",\n\t\t\t\t\t\t\"success\",\n\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\"danger\",\n\t\t\t\t\t\t\"primary\",\n\t\t\t\t\t\t\"secondary\",\n\t\t\t\t\t\t\"light\",\n\t\t\t\t\t\t\"dark\",\n\t\t\t\t\t].indexOf(value) !== -1\n\t\t\t\t);\n\t\t\t},\n\t\t\tdefault: \"secondary\",\n\t\t},\n\t\tsource: {\n\t\t\tvalidator: function (value) {\n\t\t\t\treturn [\"system\", \"client\", \"command\"].indexOf(value) !== -1;\n\t\t\t},\n\t\t},\n\t\ttimestamp: { type: Number },\n\t},\n\tdata() {\n\t\treturn {\n\t\t\thandle: undefined,\n\t\t\trelativeTime: undefined,\n\t\t};\n\t},\n\tmethods: {\n\t\tdismiss() {\n\t\t\tthis.$emit(\"dismiss\", { topic: this.topic });\n\t\t},\n\t\tupdateRelativeTime() {\n\t\t\t// in milliseconds\n\t\t\tconst units = {\n\t\t\t\tyear: 24 * 60 * 60 * 1000 * 365,\n\t\t\t\tmonth: (24 * 60 * 60 * 1000 * 365) / 12,\n\t\t\t\tday: 24 * 60 * 60 * 1000,\n\t\t\t\thour: 60 * 60 * 1000,\n\t\t\t\tminute: 60 * 1000,\n\t\t\t\tsecond: 1000,\n\t\t\t};\n\t\t\tvar rtf = new Intl.RelativeTimeFormat(\"de\", { numeric: \"auto\" });\n\t\t\tconst now = new Date();\n\t\t\tconst elapsed = this.timestamp * 1000 - now;\n\t\t\tfor (var unit in units) {\n\t\t\t\tif (Math.abs(elapsed) > units[unit]) {\n\t\t\t\t\tthis.relativeTime = rtf.format(\n\t\t\t\t\t\tMath.round(elapsed / units[unit]),\n\t\t\t\t\t\tunit\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n\tmounted() {\n\t\tthis.handle = window.setInterval(this.updateRelativeTime, 1000);\n\t},\n\tunmounted() {\n\t\twindow.clearInterval(this.handle);\n\t},\n};\n</script>\n\n<style scoped>\n.toast {\n\topacity: 1;\n\tborder: 1px solid rgba(0, 0, 0, 0.1);\n}\n</style>\n"],"names":[],"sourceRoot":""}